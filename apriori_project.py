# -*- coding: utf-8 -*-
"""Apriori_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSl15MP43BPmSv2fukMrz_aNcvrdApit
"""

import pandas as pd
from collections import Counter
from itertools import combinations
df = pd.read_csv('/content/sample_data/transactions.csv', header=None)


class Apriori:
    def __init__(self, data_frame, sup, conf):
        self.df = data_frame
        self.data = []
        self.items = []
        self.min_sup = sup
        self.min_conf = conf
        self.can_table = Counter()
        self.freq_table = Counter()
        self.conf_table = Counter()
        self.table_count = 1
        self.data_clean()

    def data_clean(self):
        self.df.fillna(0, inplace=True)
        self.data_proc()

    def data_proc(self):
        for i in range(len(self.df.values)):
            row_values = []
            for j in range(len(self.df.columns)):
                value = self.df.values[i, j]
                if value != 0:
                    row_values.append(str(value))
            self.data.append(row_values)
        self.unique_item()

    def unique_item(self):
        for row in self.data:
            for item in row:
                if item not in self.items:
                    self.items.append(item)
        self.items = sorted(self.items)
        print("Unique Items:", self.items)
        print("Unique Items count:", len(self.items))
        self.gen_can_table()

    def gen_can_table(self):
        print()
        print()
        print("Candidate Table:", self.table_count)
        if self.table_count == 1:
            freq = Counter()
            for item in self.items:
                for row in self.data:
                    if item in row:
                        freq[item] += 1
            self.can_table = freq
            for item in self.can_table:
                print(item, ":", self.can_table[item])
        else:
            temp_set = set()  # creating the pairs
            temp_list = list(self.freq_table)
            for i in range(len(temp_list)):
                for j in range(i + 1, len(temp_list)):
                    pair = temp_list[i].union(temp_list[j])
                    if len(pair) == self.table_count:
                        temp_set.add(pair)
            temp_set = list(temp_set)

            temp_table = Counter()  # creating the table
            for pair in temp_set:
                for row in self.data:
                    temp_row = set(row)
                    if pair.issubset(temp_row):
                        temp_table[pair] += 1
            self.can_table = temp_table
            for item in self.can_table:
                print(list(item), ":", self.can_table[item])

        self.gen_freq_item_sets()

    def gen_freq_item_sets(self):
        temp_table = Counter()
        if self.table_count == 1:
            for item in self.can_table:
                if self.can_table[item] >= self.min_sup:
                    self.freq_table[frozenset([item])] = self.can_table[item]
            print()
            print()
            print("Frequent item-set Table:", self.table_count)
            for item in self.freq_table:
                print(list(item), ":", self.freq_table[item])
            self.table_count += 1
            self.gen_can_table()
        else:
            for item in self.can_table:
                if self.can_table[item] >= self.min_sup:
                    temp_table[item] = self.can_table[item]
            if len(temp_table) != 0:
                self.freq_table = temp_table
                print()
                print()
                print("Frequent item-set Table:", self.table_count)
                for item in self.freq_table:
                    print(list(item), ":", self.freq_table[item])
                self.table_count += 1
                self.gen_can_table()
            else:
                print()
                print()
                print("Result Table: ")
                for item in self.freq_table:
                    print(list(item), ":", self.freq_table[item])
                self.confidence_calculation()

    def confidence_calculation(self):
        print()
        print()
        print("confidence calculation: ")
        self.conf_table = Counter()
        for items in self.freq_table:
            combination = []
            for pairs in combinations(items, len(items) - 1):
                combination.append(frozenset(pairs))
            for item_a in combination:
                item_b = items - item_a
                freq_item_a = 0
                freq_item_b = 0
                freq_items = 0
                for row in self.data:
                    row_set = set(row)
                    if item_a.issubset(row_set):
                        freq_item_a += 1
                    if item_b.issubset(row_set):
                        freq_item_b += 1
                    if items.issubset(row_set):
                        freq_items += 1
                conf_a = (freq_items / freq_item_a) * 100
                text_a = str(list(item_a)) + ' --> ' + str(list(item_b)) + ' = '
                conf_b = (freq_items / freq_item_b) * 100
                text_b = str(list(item_b)) + ' --> ' + str(list(item_a)) + ' = '
                print(text_a + f"{conf_a:.2f}" + '%')
                print(text_b + str(f"{conf_b:.2f}") + '%')
                self.conf_table[text_a] = conf_a
                self.conf_table[text_b] = conf_b
        self.choosing_confidence()

    def choosing_confidence(self):
        print()
        print()
        print("Choosing confidence: ")
        for item in self.conf_table:
            if self.conf_table[item] >= self.min_conf:
                print(str(item) + f"{self.conf_table[item]:.2f}" + '%')


df1 = Apriori(df, 15, 35)